import asyncio
import logging
import sys
import time
import struct
from pymodbus.client.sync import ModbusSerialClient as ModbusClient
import datetime
from pymodbus.exceptions import ModbusIOException
from pymodbus.register_read_message import ReadInputRegistersResponse,ReadHoldingRegistersResponse

HOLDINGS = {0  : {'name':'On/Off',
                  'description':'The Standby On/Off state and the AC output DisEN/EN state; The low byte is the Standby on/off(1/0), the high byte is the AC output disable/enable (1/0).',
                  'values': { 0x0000: 'Standby off, Output Enable',
                              0x0001: 'Standby on, Output Enable',
                              0x0100: 'Standby Off, Output Disable',
                              0x0101: 'Standby On, Output Disable'},
                  'unit': '',
                  'writable':False},
            1  : {'name':'OutputConfig',
                  'description':'AC output set',
                  'values': { 0: 'Bat First',
                              1: 'PV First',
                              2: 'Utility First',
                              3: 'PV+Utility First'},
                  'unit':'',
                  'writable':True},
            2  : {'name':'ChargeConfig',
                  'description':'Charge source set',
                  'values' : { 0: 'PV First',
                               1: 'PV+Utility',
                               2: 'PV Only'},
                  'unit':'',
                  'writable':True},
            3  : {'name':'UtiOutStart',
                  'description':'Uti Output Start Time',
                  'values': {},
                  'unit':'hour',
                  'writable':True},
            4  : {'name':'UtiOutEnd',
                  'description':'Uti Output End Time',
                  'values': {},
                  'unit':'hour',
                  'writable':True},
            5  : {'name':'UtiChargeStart',
                  'description':'Uti Charge Start Time',
                  'values': {},
                  'unit':'hour',
                  'writable':True},
            5  : {'name':'UtiChargeEnd',
                  'description':'Uti Charge End Time',
                  'values': {},
                  'unit':'hour',
                  'writable':True},
            7  : {'name':'PVModel',
                  'description':'PV Input Mode',
                  'values': { 0: 'Independent',
                              1: 'Parallel'},
                  'unit':'',
                  'writable':True},
            8  : {'name':'ACInModel',
                  'description':'AC Input Mode',
                  'values': { 0: 'APL',
                              1: 'UPS',
                              2: 'GEN'},
                  'unit':'',
                  'writable':True},
            9  : {'name':'Fw version H',
                  'description':'Firmware version (high)',
                  'values': {},
                  'unit':'ASCII',
                  'writable':True},
            10  : {'name':'Fw version M',
                   'description':'Firmware version (middle)',
                   'values': {},
                   'unit':'ASCII',
                   'writable':True},
            11  : {'name':'Fw version L',
                   'description':'Firmware version (low)',
                   'values': {},
                   'unit':'ASCII',
                   'writable':True},
            12  : {'name':'Fw version2 H',
                   'description':'Control Firmware version (high)',
                   'values': {},
                   'unit':'ASCII',
                   'writable':True},
            13  : {'name':'Fw version2 M',
                   'description':'Control Firmware version (middle)',
                   'values': {},
                   'unit':'ASCII',
                   'writable':True},
            14  : {'name':'Fw version2 L',
                   'description':'Control Firmware version (low)',
                   'values': {},
                   'unit':'ASCII',
                   'writable':False},
            15  : {'name':'LCD language',
                   'description':'LCD language',
                   'values': {},
                   'unit':'',
                   'writable':True},
            18  : {'name':'OutputVoltType',
                   'description':'Output Volt Type',
                   'values': {0:'208VAC',
                              1:'230VAC',
                              2:'240VAC'},
                   'unit':'',
                   'writable':True},
            19  : {'name':'OutputFreqType',
                   'description':'Output Freq Type',
                   'values': {0:'50Hz',
                              1:'60Hz'},
                   'unit':'',
                   'writable':True},
            20  : {'name':'OverLoadRestart',
                   'description':'Over Load Restart',
                   'values': {0:'Yes',
                              1:'No',
                              2:'Switch to UTI'},
                   'unit':'',
                   'writable':True},
            21  : {'name':'OverTempRestart',
                   'description':'Over Temperature Restart',
                   'values': {0:'Yes',
                              1:'No'},
                   'unit':'',
                   'writable':True},
            22  : {'name':'BuzzerEN',
                   'description':'Buzzer on/off enable',
                   'values': {0:'Disable',
                              1:'Enable'},
                   'unit':'',
                   'writable':True},
            23  : {'name':'Serial No. 5',
                   'description':'Serial number 5',
                   'values': {},
                   'unit':'ASCII',
                   'writable':True},
            24  : {'name':'Serial No. 4',
                   'description':'Serial number 4',
                   'values': {},
                   'unit':'ASCII',
                   'writable':True},
            25  : {'name':'Serial No. 3',
                   'description':'Serial number 3',
                   'values': {},
                   'unit':'ASCII',
                   'writable':True},
            26  : {'name':'Serial No. 2',
                   'description':'Serial number 2',
                   'values': {},
                   'unit':'ASCII',
                   'writable':True},
            27  : {'name':'Serial No. 1',
                   'description':'Serial number 1',
                   'values': {},
                   'unit':'ASCII',
                   'writable':True},
            28  : {'name':'Moudle H',
                   'description':'Inverter Moudle (high) - Can be set at standy state Only',
                   'values': {},
                   'unit':'',
                   'writable':True},
            29  : {'name':'Moudle L',
                   'description':'Inverter Moudle (low) - Can be set at standy state Only',
                   'values': {},
                   'unit':'',
                   'writable':True},
            30  : {'name':'Com Address',
                   'description':'Communicate address',
                   'values': {},
                   'unit':'',
                   'writable':True},
            31  : {'name':'FlashStart',
                   'description':'Update firmware',
                   'values': {1:'own',
                              4:'control broad'},
                   'unit':'',
                   'writable':True},
            32  : {'name':'Reset User Info',
                   'description':'Reset User Information',
                   'values': {},
                   'unit':'',
                   'writable':True},
            33  : {'name':'Reset to factory',
                   'description':'Reset to factory',
                   'values': {},
                   'unit':'',
                   'writable':True},
            34  : {'name':'MaxChargeCurr',
                   'description':'Max Charge Current',
                   'values': {},
                   'unit':'A',
                   'writable':True},
            35  : {'name':'BulkChargeVolt',
                   'description':'Bulk Charge Volt',
                   'values': {},
                   'unit':'V',
                   'writable':True,
                   'getfunc':'%s/10.0',
                   'setfunc':'int(%s*10)'},
            36  : {'name':'FloatChargeVolt',
                   'description':'Float Charge Volt',
                   'values': {},
                   'unit':'V',
                   'writable':True,
                   'getfunc':'%s/10.0',
                   'setfunc':'int(%s*10)'},
            37  : {'name':'BatLowToUtiVolt',
                   'description':'Bat Low Volt Switch To Uti',
                   'values': {},
                   'unit':'V',
                   'writable':True,
                   'getfunc':'%s/10.0',
                   'setfunc':'int(%s*10)'},
            38  : {'name':'FloatChargeCurr',
                   'description':'Float Charge Current',
                   'values': {},
                   'unit':'A',
                   'writable':True,
                   'getfunc':'%s/10.0',
                   'setfunc':'int(%s*10)'},
            39  : {'name':'Battery Type',
                   'description':'Battery Type',
                   'values': {0:'Lead Acid',
                              1:'Flooded',
                              2:'Lithium',
                              4:'Custom'},
                   'unit':'',
                   'writable':True},
            40  : {'name':'Aging Mode',
                   'description':'Aging Mode',
                   'values': {0:'Normal Mode',
                              1:'Aging Mode'},
                   'unit':'',
                   'writable':True},
            43  : {'name':'DTC',
                   'description':'Device Type Code',
                   'values': {},
                   'unit':'',
                   'writable':False},
            45  : {'name':'Sys Year',
                   'description':'System time - year',
                   'values': {},
                   'unit':'',
                   'writable':True},
            46  : {'name':'Sys Month',
                   'description':'System time - month',
                   'values': {},
                   'unit':'',
                   'writable':True},
            47  : {'name':'Sys Day',
                   'description':'System time - day',
                   'values': {},
                   'unit':'',
                   'writable':True},
            48  : {'name':'Sys Hour',
                   'description':'System time - hour',
                   'values': {},
                   'unit':'',
                   'writable':True},
            49  : {'name':'Sys Min',
                   'description':'System time - monute',
                   'values': {},
                   'unit':'',
                   'writable':True},
            50  : {'name':'Sys Sec',
                   'description':'System time - second',
                   'values': {},
                   'unit':'',
                   'writable':True},
            59  : {'name':'Manufacturer Info 8',
                   'description':'Manufacturer information (high)',
                   'values': {},
                   'unit':'',
                   'writable':False},
            60  : {'name':'Manufacturer Info 7',
                   'description':'Manufacturer information (middle)',
                   'values': {},
                   'unit':'',
                   'writable':False},
            61  : {'name':'Manufacturer Info 6',
                   'description':'Manufacturer information (low)',
                   'values': {},
                   'unit':'',
                   'writable':False},
            62  : {'name':'Manufacturer Info 5',
                   'description':'Manufacturer information (high)',
                   'values': {},
                   'unit':'',
                   'writable':False},
            63  : {'name':'Manufacturer Info 4',
                   'description':'Manufacturer information (middle)',
                   'values': {},
                   'unit':'',
                   'writable':False},
            64  : {'name':'Manufacturer Info 3',
                   'description':'Manufacturer information (low)',
                   'values': {},
                   'unit':'',
                   'writable':False},
            65  : {'name':'Manufacturer Info 2',
                   'description':'Manufacturer information (low)',
                   'values': {},
                   'unit':'',
                   'writable':False},
            66  : {'name':'Manufacturer Info 1',
                   'description':'Manufacturer information (high)',
                   'values': {},
                   'unit':'',
                   'writable':False},
            67  : {'name':'FW Build No. 4',
                   'description':'Control FW Build No. 2',
                   'values': {},
                   'unit':'',
                   'writable':False},
            68  : {'name':'FW Build No. 3',
                   'description':'Control FW Build No. 1',
                   'values': {},
                   'unit':'',
                   'writable':False},
            69  : {'name':'FW Build No. 2',
                   'description':'COM FW Build No. 2',
                   'values': {},
                   'unit':'',
                   'writable':False},
            70  : {'name':'FW Build No. 1',
                   'description':'COM FW Build No. 1',
                   'values': {},
                   'unit':'',
                   'writable':False},
            72  : {'name':'Sys Weekly',
                   'description':'Sys Weekly',
                   'values': {},
                   'unit':'',
                   'writable':True},
            73  : {'name':'ModbusVersion',
                   'description':'ModbusVersion',
                   'values': {},
                   'unit':'',
                   'writable':False,
                   'getfunc':'%s/10.0'},
            76  : {'name':'Rate Watt H',
                   'description':'Rate active power(high)',
                   'values': {},
                   'unit':'',
                   'writable':False,
                   'getfunc':'%s/10.0'},
            77  : {'name':'Rate Watt L',
                   'description':'Rate active power(low)',
                   'values': {},
                   'unit':'',
                   'writable':False,
                   'getfunc':'%s/10.0'},
            78  : {'name':'Rate VA L',
                   'description':'Rate apparent power(low)',
                   'values': {},
                   'unit':'',
                   'writable':False,
                   'getfunc':'%s/10.0'},
            79  : {'name':'Rate VA L',
                   'description':'Rate apparent power(low)',
                   'values': {},
                   'unit':'',
                   'writable':False,
                   'getfunc':'%s/10.0'},
            80  : {'name':'Factory',
                   'description':'The ODM Info code',
                   'values': {},
                   'unit':'',
                   'writable':False}}


INPUTS = {0  : {'name':'System Status',
                  'description':'System run state',
                  'values': { 1: 'Standby',
                              2: 'Not use',
                              3: 'Discharge',
                              4: 'Flash',
                              5: 'PV Charge',
                              6: 'AC Charge',
                              7: 'Combine Charge',
                              8: 'Combine Charge and Bypass',
                              9: 'PV Charge and Bypass',
                              10: 'AC Charge and Bypass',
                              11: 'Bypass',
                              12: 'PV Charge and Discharge'},
                  'unit': ''},
            1  : {'name':'Vpv1',
                  'description':'PV1 voltage',
                  'values': {},
                  'unit':'V',
                  'getfunc':'%s/10.0'},
            2  : {'name':'Vpv2',
                  'description':'PV2 voltage',
                  'values': {},
                  'unit':'V',
                  'getfunc':'%s/10.0'},
            3  : {'name':'Ppv1 H',
                  'description':'PV1 charge power (high)',
                  'values': {},
                  'unit':'W',
                  'getfunc':'%s/10.0'},
            4  : {'name':'Ppv1 L',
                  'description':'PV1 charge power (low)',
                  'values': {},
                  'unit':'W',
                  'getfunc':'%s/10.0'},
            5  : {'name':'Ppv2 H',
                  'description':'PV2 charge power (high)',
                  'values': {},
                  'unit':'W',
                  'getfunc':'%s/10.0'},
            6  : {'name':'Ppv2 L',
                  'description':'PV2 charge power (low)',
                  'values': {},
                  'unit':'W',
                  'getfunc':'%s/10.0'},
            7  : {'name':'Buck1Curr',
                  'description':'Buck1 current',
                  'values': {},
                  'unit':'A',
                  'getfunc':'%s/10.0'},
            8  : {'name':'Buck2Curr',
                  'description':'Buck2 current',
                  'values': {},
                  'unit':'A',
                  'getfunc':'%s/10.0'},
            9  : {'name':'OP_Watt H',
                  'description':'Output active power (high)',
                  'values': {},
                  'unit':'W',
                  'getfunc':'%s/10.0'},
            10 : {'name':'OP_Watt L',
                  'description':'Output active power (low)',
                  'values': {},
                  'unit':'W',
                  'getfunc':'%s/10.0'},
            11 : {'name':'OP_VA H',
                  'description':'Output apparent power (high)',
                  'values': {},
                  'unit':'VA',
                   'getfunc':'%s/10.0'},
            12 : {'name':'OP_VA L',
                  'description':'Output apparent power (low)',
                  'values': {},
                  'unit':'VA',
                  'getfunc':'%s/10.0'},
            13 : {'name':'ACChr_Watt H',
                  'description':'AC charge watt (high)',
                  'values': {},
                  'unit':'W',
                  'getfunc':'%s/10.0'},
            14 : {'name':'ACChr_Watt L',
                  'description':'AC charge watt (low)',
                  'values': {},
                  'unit':'W',
                  'getfunc':'%s/10.0'},
            15 : {'name':'ACChr_VA H',
                  'description':'AC charge apparent power (high)',
                  'values': {},
                  'unit':'VA',
                  'getfunc':'%s/10.0'},
            16 : {'name':'ACChr_VA L',
                  'description':'AC charge apparent power (low)',
                  'values': {},
                  'unit':'VA',
                  'getfunc':'%s/10.0'},
            17 : {'name':'Bat Volt',
                  'description':'Battery volt (M3)',
                  'values': {},
                  'unit':'V',
                  'getfunc':'%s/100.0'},
            18 : {'name':'BatterySOC',
                  'description':'Battery SOC',
                  'values': {},
                  'unit':'%'},
            19 : {'name':'Bus Volt',
                  'description':'Bus Voltage',
                  'values': {},
                  'unit':'V',
                  'getfunc':'%s/10.0'},
            20 : {'name':'Grid Volt',
                  'description':'AC input Volt',
                  'values': {},
                  'unit':'V',
                  'getfunc':'%s/10.0'},
            21 : {'name':'Line Freq',
                  'description':'AC input frequency',
                  'values': {},
                  'unit':'Hz',
                  'getfunc':'%s/100.0'},
            22 : {'name':'OutputVolt',
                  'description':'AC output Volt',
                  'values': {},
                  'unit':'V',
                  'getfunc':'%s/10.0'},
            23 : {'name':'OutputFreq',
                  'description':'AC output frequency',
                  'values': {},
                  'unit':'Hz',
                  'getfunc':'%s/100.0'},
            24 : {'name':'Ouput DCV',
                  'description':'Ouput DC Volt',
                  'values': {},
                  'unit':'V',
                  'getfunc':'%s/10.0'},
            25 : {'name':'InvTemp',
                  'description':'Inv Temperature',
                  'values': {},
                  'unit':'°C',
                  'getfunc':'%s/10.0'},
            26 : {'name':'DcDcTemp',
                  'description':'DC-DC Temperature',
                  'values': {},
                  'unit':'°C',
                  'getfunc':'%s/10.0'},
            27 : {'name':'LoadPercent',
                  'description':'Load Percent',
                  'values': {},
                  'unit':'%',
                  'getfunc':'%s/10.0'},
            28 : {'name':'Bat_s_Volt',
                  'description':'Battery‐port volt (DSP)',
                  'values': {},
                  'unit':'V',
                  'getfunc':'%s/100.0'},
            29 : {'name':'Bat_Volt_DSP',
                  'description':'Battery‐bus volt (DSP)',
                  'values': {},
                  'unit':'V',
                  'getfunc':'%s/100.0'},
            30 : {'name':'Time total H',
                  'description':'Work time total (high)',
                  'values': {},
                  'unit':'S',
                  'getfunc':'%s*65536*2'},
            31 : {'name':'Time total L',
                  'description':'Work time total (low)',
                  'values': {},
                  'unit':'S',
                  'getfunc':'%s*2'},
            32 : {'name':'Buck1_NTC',
                  'description':'Buck1 Temperature',
                  'values': {},
                  'unit':'°C',
                  'getfunc':'%s/10.0'},
            33 : {'name':'Buck2_NTC',
                  'description':'Buck2 Temperature',
                  'values': {},
                  'unit':'°C',
                  'getfunc':'%s/10.0'},
            34 : {'name':'OP_Curr',
                  'description':'Output Current',
                  'values': {},
                  'unit':'A',
                  'getfunc':'%s/10.0'},
            35 : {'name':'Inv_Curr',
                  'description':'Inv Current',
                  'values': {},
                  'unit':'A',
                  'getfunc':'%s/10.0'},
            36 : {'name':'AC_InWatt H',
                  'description':'AC input watt (high)',
                  'values': {},
                  'unit':'W',
                  'getfunc':'%s/10.0'},
            37 : {'name':'AC_InWatt L',
                  'description':'AC input watt (low)',
                  'values': {},
                  'unit':'W',
                  'getfunc':'%s/10.0'},
            38 : {'name':'AC_InVA H',
                  'description':'AC input apparent power (high)',
                  'values': {},
                  'unit':'VA',
                  'getfunc':'%s/10.0'},
            39 : {'name':'AC_InVA L',
                  'description':'AC input apparent power (low)',
                  'values': {},
                  'unit':'VA',
                  'getfunc':'%s/10.0'},
            40 : {'name':'Fault bit',
                  'description':'Fault bit',
                  'values': {},
                  'unit':''},
            41 : {'name':'Warning bit',
                  'description':'Warning bit',
                  'values': {},
                  'unit':''},
            42 : {'name':'Fault Value',
                  'description':'Fault Value',
                  'values': {},
                  'unit':''},
            43 : {'name':'Warning Value',
                  'description':'Warning Value',
                  'values': {},
                  'unit':''},
            44 : {'name':'DTC',
                  'description':'Device Type Code',
                  'values': {},
                  'unit':''},
            45 : {'name':'Check Step',
                  'description':'Product check step',
                  'values': {1:'PV1 charge power check',
                             2:'PV2 charge power check',
                             3:'AC charge Power check'},
                  'unit':''},
            46 : {'name':'Production Line Mode',
                  'description':'Production Line Mode',
                  'values': {0:'Not at Production Line Mode',
                             1:'Production Line Mode',
                             2:'Production Line Clear Fault Mode'},
                  'unit':''},
            47 : {'name':'ConstantPowerOKFlag',
                  'description':'Constant Power OK Flag',
                  'values': {0:'Not OK',
                             1:'OK'},
                  'unit':''},
            48 : {'name':'Epv1_today H',
                  'description':'PV Energy today (high)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'65536*%s/10.0'},
            49 : {'name':'Epv1_today L',
                  'description':'PV Energy today (low)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'%s/10.0'},
            50 : {'name':'Epv1_total H',
                  'description':'PV Energy total (high)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'65536*%s/10.0'},
            51 : {'name':'Epv1_total L',
                  'description':'PV Energy total (low)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'%s/10.0'},
            52 : {'name':'Epv2_today H',
                  'description':'PV2 Energy today (high)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'65536*%s/10.0'},
            53 : {'name':'Epv2_today L',
                  'description':'PV2 Energy today (low)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'%s/10.0'},
            54 : {'name':'Epv2_total H',
                  'description':'PV2 Energy total (high)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'65536*%s/10.0'},
            55 : {'name':'Epv2_total L',
                  'description':'PV2 Energy total (low)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'%s/10.0'},
            56 : {'name':'Eac_chrToday H',
                  'description':'AC charge Energy today (high)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'65536*%s/10.0'},
            57 : {'name':'Eac_chrToday L',
                  'description':'AC charge Energy today (low)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'%s/10.0'},
            58 : {'name':'Eac_chrTotal H',
                  'description':'AC charge Energy total (high)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'65536*%s/10.0'},
            59 : {'name':'Eac_chrTotal L',
                  'description':'AC charge Energy total (low)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'%s/10.0'},
            60 : {'name':'Ebat_dischrToday H',
                  'description':'Bat discharge Energy today (high)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'65536*%s/10.0'},
            61 : {'name':'Ebat_dischrToday L',
                  'description':'Bat discharge Energy today (low)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'%s/10.0'},
            62 : {'name':'Ebat_dischrTotal H',
                  'description':'Bat discharge Energy total (high)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'65536*%s/10.0'},
            63 : {'name':'Ebat_dischrTotal L',
                  'description':'Bat discharge Energy total (low)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'%s/10.0'},
            64 : {'name':'Eac_dischrToday H',
                  'description':'AC discharge Energy today (high)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'65536*%s/10.0'},
            65 : {'name':'Eac_dischrToday H',
                  'description':'AC discharge Energy today (low)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'%s/10.0'},
            66 : {'name':'Eac_dischrTotal H',
                  'description':'AC discharge Energy total (high)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'65536*%s/10.0'},
            67 : {'name':'Eac_dischrTotal H',
                  'description':'AC discharge Energy total (low)',
                  'values': {},
                  'unit':'kW.h',
                  'getfunc':'%s/10.0'},
            68 : {'name':'ACChrCurr',
                  'description':'AC Charge Battery Current',
                  'values': {},
                  'unit':'A',
                  'getfunc':'%s/10.0'},
            69 : {'name':'AC_DisChrWatt H',
                  'description':'AC discharge watt (high)',
                  'values': {},
                  'unit':'W',
                  'getfunc':'65536*%s/10.0'},
            70 : {'name':'AC_DisChrWatt L',
                  'description':'AC discharge watt (low)',
                  'values': {},
                  'unit':'W',
                  'getfunc':'%s/10.0'},
            71 : {'name':'AC_DisChrVA H',
                  'description':'AC discharge apparent power (high)',
                  'values': {},
                  'unit':'VA',
                  'getfunc':'65536*%s/10.0'},
            72 : {'name':'AC_DisChrVA L',
                  'description':'AC discharge apparent power (low)',
                  'values': {},
                  'unit':'VA',
                  'getfunc':'%s/10.0'},
            73 : {'name':'Bat_DisChrWatt H',
                  'description':'Bat discharge watt (high)',
                  'values': {},
                  'unit':'W',
                  'getfunc':'65536*%s/10.0'},
            74 : {'name':'Bat_DisChrWatt L',
                  'description':'Bat discharge watt (low)',
                  'values': {},
                  'unit':'W',
                  'getfunc':'%s/10.0'},
            75 : {'name':'Bat_DisChrVA H',
                  'description':'Bat discharge apparent power (high)',
                  'values': {},
                  'unit':'VA',
                  'getfunc':'65536*%s/10.0'},
            76 : {'name':'Bat_DisChrVA L',
                  'description':'Bat discharge apparent power (low)',
                  'values': {},
                  'unit':'VA',
                  'getfunc':'%s/10.0'},
            77 : {'name':'Bat_Watt H',
                  'description':'Bat watt (high)',
                  'values': {},
                  'unit':''},
            78 : {'name':'Bat_Watt L',
                  'description':'Bat watt (low)',
                  'values': {},
                  'unit':'W',
                  'getfunc':'%s/10.0'},
            79 : {'name':'Reservered',
                  'description':'Not Used',
                  'values': {},
                  'unit':''},
            80 : {'name':'BatOverCharge',
                  'description':'Battery Over Charge Flag',
                  'values': {0: 'Battery not over charge',
                             1: 'Battery over charge'},
                  'unit':''},
            81 : {'name':'MpptFanSpeed',
                  'description':'Fan speed of MPPT Charger',
                  'values': {},
                  'unit':'%'},
            82 : {'name':'InvFanSpeed',
                  'description':'Fan speed of Inverter',
                  'values': {},
                  'unit':'%'},
            83 : {'name':'BatChargeCurrent',
                  'description':'Battery Charge Current (unsure)',
                  'values': {},
                  'unit':'A',
                  'getfunc':'%s/10.0'},
            84 : {'name':'BatDischargeCurrent',
                  'description':'Battery Discharge Current (unsure)',
                  'values': {},
                  'unit':'A',
                  'getfunc':'%s/10.0'},
            90 : {'name':'BatTotChargeCurrent',
                  'description':'Battery Total Charge Current (unsure)',
                  'values': {},
                  'unit':'A',
                  'getfunc':'%s/10.0'},          
            180: {'name':'Solar1_Status',
                  'description':'Solar Charger1 Status',
                  'values': {},
                  'unit':''},
            181: {'name':'Solar1_FaultCode',
                  'description':'Solar Charger1 FaultCode',
                  'values': {},
                  'unit':''},
            182: {'name':'Solar1_WarningCode',
                  'description':'Solar Charger1 WarningCode',
                  'values': {},
                  'unit':''},
            183: {'name':'Solar1_BatVolt',
                  'description':'Solar Charger1 battery voltage',
                  'values': {},
                  'unit':'V',
                  'getfunc':'%s/100.0'},
            184: {'name':'Solar1_PV1Volt',
                  'description':'Solar Charger1 PV1 voltage',
                  'values': {},
                  'unit':'V',
                  'getfunc':'%s/10.0'},
            185: {'name':'Solar1_PV2Volt',
                  'description':'Solar Charger1 PV2 voltages',
                  'values': {},
                  'unit':'V',
                  'getfunc':'%s/10.0'},
            186: {'name':'Solar1_Buck1Curr',
                  'description':'Solar Charger1 Buck1 current',
                  'values': {},
                  'unit':'A',
                  'getfunc':'%s/10.0'},
            187: {'name':'Solar1_Buck2Curr',
                  'description':'Solar Charger1 Buck2 current',
                  'values': {},
                  'unit':'A',
                  'getfunc':'%s/10.0'},
            188: {'name':'Solar1_PV1ChrPower H',
                  'description':'Solar Charger1 PV1 charge Power High 16 bit',
                  'values': {},
                  'unit':'W',
                  'getfunc':'65536*%s/10.0'},
            189: {'name':'Solar1_PV1ChrPower L',
                  'description':'Solar Charger1 PV1 charge Power Low 16 bit',
                  'values': {},
                  'unit':'W',
                  'getfunc':'%s/10.0'},}



class Growatt:
    def __init__(self, client, name, unit):
        self.client = client
        self.name = name
        self.unit = unit
        self._holdings = None
        self._holdings_last_update = None
        self._inputs = None
        self._inputs_last_update = None

    def decodeString(self,i):
        return str(chr(i >> 8)
                   + chr(i & 0x000000FF))
        
    def readSettings(self) :
        ret = {}
        h = self.client.read_holding_registers(address=0, count=45, unit=1)
        if type(h) == ReadHoldingRegistersResponse :
            for i in range(0,45) :
                ret[i]=h.registers[i]
        h = self.client.read_holding_registers(address=45, count=45, unit=1)
        if type(h) == ReadHoldingRegistersResponse :
            for i in range(0,45) :
                ret[i+45]=h.registers[i]
        self._holdings_last_update = time.time()            
        self._holdings = ret
        
    def getSetting(self,i) :
        if self._holdings == None : return
        if i not in HOLDINGS :
            v = self._holdings[i]
            return {'rawvalue':v,
                    'value':v,
                    'values': {},
                    'name':'Setting %d' % i,
                    'description':'Undocumented setting',
                    'unit':'unknown',
                    'writable':'False'}
        ret = HOLDINGS[i]
        v = self._holdings[i]
        ret['rawvalue']=v
        if v in ret['values'] : v = ret['values'][v]        
        ret['value']=v
        if 'getfunc' in ret :
            ret['value'] = eval(ret['getfunc'] % ret['value'])
        if ret['unit'] == 'ASCII' : ret['value']=self.decodeString(ret['value'])
        return ret

    def getAllSettings(self):
        if self._holdings == None : return
        ret={}
        for i in range(0,81) :
            ret[i] = self.getSetting(i)
        return ret


    def readStatus(self) :
        ret = {}
        h = self.client.read_input_registers(address=0, count=45, unit=1)
        if type(h) == ReadInputRegistersResponse :
            for i in range(0,45) :
                ret[i]=h.registers[i]
            
        h = self.client.read_input_registers(address=45, count=45, unit=1)
        if type(h) == ReadInputRegistersResponse :
            for i in range(0,45) :
                ret[i+45]=h.registers[i]

        h = self.client.read_input_registers(address=90, count=45, unit=1)
        if type(h) == ReadInputRegistersResponse :
            for i in range(0,45) :
                ret[i+90]=h.registers[i]            

        h = self.client.read_input_registers(address=135, count=45, unit=1)
        if type(h) == ReadInputRegistersResponse :
            for i in range(0,45) :
                ret[i+135]=h.registers[i]

        h = self.client.read_input_registers(address=180, count=45, unit=1)
        if type(h) == ReadInputRegistersResponse :
            for i in range(0,45) :
                ret[i+180]=h.registers[i]
            
        self._inputs_last_update = time.time()                        
        self._inputs = ret

    def getStatus(self,i) :
        if self._inputs == None : return
        if type(i) != int : # Get status by name
            for n in range(0,list(INPUTS.keys())[-1]) :
                if n in INPUTS and INPUTS[n]['name'] == i :
                    i = n
                    break
        if i not in INPUTS :
            v = self._inputs[i]
            return {'rawvalue':v,
                    'value':v,
                    'values': {},
                    'name':'Setting %d' % i,
                    'description':'Undocumented',
                    'unit':'unknown',
                    'writable':'False'}                
        v = self._inputs[i]            
        ret = INPUTS[i]
        ret['rawvalue']=v
        if v in ret['values'] : v = ret['values'][v]        
        ret['value']=v
        if 'getfunc' in ret :
            ret['value'] = eval(ret['getfunc'] % ret['value'])
        if ret['unit'] == 'ASCII' : ret['value']=self.decodeString(ret['value'])
        return ret

    def getAllStatus(self):
        if self._inputs == None : return
        ret={}
        for i in range(0,200) :
            ret[i] = self.getStatus(i)
        return ret
    
    def getInfosGrid(self) :
        ret = {'GRID_VOLTAGE'      : self.getStatus('Grid Volt')['value'],
               'GRID_FREQUENCY'    : self.getStatus('Line Freq')['value'],
               'GRID_ACTIVE_POWER' : self.getStatus('AC_InWatt L')['value']+self.getStatus('AC_InWatt H')['value']*65536,
               'GRID_APP_POWER'    : self.getStatus('AC_InVA L')['value']+self.getStatus('AC_InVA H')['value']*65536}
        return ret

    def getInfosOutput(self) :
        ret = {'AC_OUTPUT_VOLTAGE'      : self.getStatus('OutputVolt')['value'],
               'AC_OUTPUT_CURRENT'      : self.getStatus('OP_Curr')['value'],
               'AC_OUTPUT_FREQUENCY'    : self.getStatus('OutputFreq')['value'],
               'AC_OUTPUT_ACTIVE_POWER' : self.getStatus('OP_Watt L')['value']+self.getStatus('OP_Watt H')['value']*65536,
               'AC_OUTPUT_APP_POWER'    : self.getStatus('OP_VA L')['value']+self.getStatus('OP_VA H')['value']*65536,
               'AC_OUTPUT_LOAD_PERCENT' : self.getStatus('LoadPercent')['value']}
        return ret
        
    def getInfosBattery(self) :
        watt_bytes = (self.getStatus('Bat_Watt H')['rawvalue']).to_bytes(2, 'big')
        watt_bytes = watt_bytes + (self.getStatus('Bat_Watt L')['rawvalue']).to_bytes(2, 'big')
        watt_ilong = struct.unpack('>l', watt_bytes)[0]
        ret = {'BAT_VOLTAGE'  : self.getStatus('Bat Volt')['value'],
               'BAT_CAPACITY' : self.getStatus('BatterySOC')['value'],
               'BAT_WATT' : watt_ilong/10.0,
               'BAT_CHARGE_CURRENT' : self.getStatus('BatChargeCurrent')['value'],
               'BAT_DISCHARGE_CURRENT' : self.getStatus('BatDischargeCurrent')['value']}
        return ret

    def getInfosBus(self) :
        ret = {'BUS_VOLTAGE' : self.getStatus('Bus Volt')['value']}
        return ret

    def getInfosTemp(self) :
        ret = {'INV_TEMP'   : self.getStatus('InvTemp')['value'],
               'DCDC_TEMP'  : self.getStatus('DcDcTemp')['value'],
               'BUCK1_TEMP' : self.getStatus('Buck1_NTC')['value'],
               'BUCK2_TEMP' : self.getStatus('Buck2_NTC')['value']}
        return ret
               
    def getInfosPV(self) :
        ret = {'PV1_INPUT_POWER'   : self.getStatus('Ppv1 L')['value']+self.getStatus('Ppv1 H')['value']*65536,
               'PV2_INPUT_POWER'   : self.getStatus('Ppv2 L')['value']+self.getStatus('Ppv2 H')['value']*65536,
               'PV1_INPUT_VOLTAGE' : self.getStatus('Vpv1')['value'],
               'PV2_INPUT_VOLTAGE' : self.getStatus('Vpv2')['value']}
        return ret

    def getInfosFan(self) :
        ret = {'FAN_SPEED_MPPT' : self.getStatus('MpptFanSpeed')['value'],
               'FAN_SPEED_INV'  : self.getStatus('InvFanSpeed')['value']}
        return ret


if __name__ == '__main__' :
    client = ModbusClient(method='rtu', port='/dev/ttyUSB1', baudrate=9600, stopbits=1, parity='N', bytesize=8, timeout=1)
    client.connect()

    g = Growatt(client,"Onduleur 1",1)
    g.readSettings()
    settings = g.getAllSettings()
    print("==== Settings ====")
    for i in settings :
        print ('%02d = %-30s : %s' % (i,'%s %s' % (settings[i]['value'],settings[i]['unit']),settings[i]['description']))

    print("")
    print("==== Status ====")
    g.readStatus()
    status = g.getAllStatus()
    for i in status :
        print ('%02d = %-30s : %s' % (i,'%s %s' % (status[i]['value'],status[i]['unit']),status[i]['description']))

    print ("")
    print ("==== Advanced funcs ====")
    print (g.getInfosGrid())
    print (g.getInfosOutput())
    print (g.getInfosBattery())
    print (g.getInfosBus())
    print (g.getInfosTemp())
    print (g.getInfosPV())
    print (g.getInfosFan())
